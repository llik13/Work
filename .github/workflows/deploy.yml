name: Deploy 🚀
on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: 279398624547.dkr.ecr.eu-north-1.amazonaws.com
  ECR_REPOSITORY: newproject/repository

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: 📦 Restore Dependencies
        run: dotnet restore ./Work2/Work2.sln
      - name: 🏗️ Build Project
        run: dotnet build ./Work2/Work2.sln --no-restore
      - name: ✅ Run Tests
        run: dotnet test ./Work2/Work2.sln --no-build --verbosity normal

  publish:
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: 📦 Build Application
        run: |
          cd Work2/WebApplication1
          dotnet publish -c Release -o ./publish
      - name: 📝 Create Dockerfile
        run: |
          cat > Work2/WebApplication1/Dockerfile << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:8.0
          WORKDIR /app
          COPY publish/ .
          EXPOSE 8080
          ENTRYPOINT ["dotnet", "WebApplication1.dll"]
          EOF
      - name: 🐳 Build and Push Docker Image
        working-directory: ./Work2/WebApplication1
        run: |
          # Build Docker image
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest .
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

          # Push images
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

          echo "✅ Successfully pushed images:"
          echo "  - ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
          echo "  - ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
  deploy:
    needs: publish
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: 🚀 Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ./deployments/ecs-task-definition.json
          service: work-service-ifatv02r
          cluster: productive-tiger-zx4plz
          wait-for-service-stability: true
