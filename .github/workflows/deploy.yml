name: Deploy 🚀
on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  ECR_REGISTRY: 279398624547.dkr.ecr.eu-north-1.amazonaws.com
  ECR_REPOSITORY: newproject/repository

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: 📦 Restore Dependencies
        run: dotnet restore ./Work2/Work2.sln
      - name: 🏗️ Build Project
        run: dotnet build ./Work2/Work2.sln --no-restore
      - name: ✅ Run Tests
        run: dotnet test ./Work2/Work2.sln --no-build --verbosity normal

  publish:
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: 📋 List files for debugging
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Work2 directory contents:"
          ls -la Work2/
          echo "WebApplication1 directory contents:"
          ls -la Work2/WebApplication1/
      - name: 📦 Build and Push Docker Image
        run: |
          # Navigate to project directory and build
          cd Work2/WebApplication1

          # Build the Docker image using .NET container support
          dotnet publish WebApplication1.csproj -c Release \
            -p:ContainerRepository=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }} \
            -p:RuntimeIdentifier=linux-x64 \
            -p:ContainerImageTags="latest,${{ github.sha }}"

          # Push all tags
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }} --all-tags
